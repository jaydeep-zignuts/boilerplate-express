const bodyParser = require("body-parser");
const express = require("express");
const myApp = require("./myApp");
const app = express();
const path = require("path");
const bGround = require("fcc-express-bground");
require("dotenv").config();

if (!process.env.DISABLE_XORIGIN) {
  app.use((req, res, next) => {
    const allowedOrigins = [
      "https://narrow-plane.gomix.me",
      "https://www.freecodecamp.com",
    ];
    const origin = req.headers.origin || "*";
    if (!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1) {
      console.log(origin);
      res.setHeader("Access-Control-Allow-Origin", origin);
      res.header(
        "Access-Control-Allow-Headers",
        "Origin, X-Requested-With, Content-Type, Accept"
      );
    }
    next();
  });
}
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());
app.use(express.static("public"));
app.use("/public", express.static("public"));

app.use((req, res, next) => {
  // console.log(req.method + " " + req.path + " - " + req.ip);
  next();
});

app.get("/", (req, res) => {
  return res.sendFile(__dirname + "/views/index.html");
  // next();
});

app.get("/json", (req, res) => {
  let message = "Hello json";
  if (process.env.MESSAGE_STYLE == "uppercase") {
    let data = message.toUpperCase();
    // console.log(data);
    return res.json({ message: data });
  } else {
    return res.json({ message: message });
  }
});
function middleware(req, res, next) {
  req.time = new Date().toString();
  next();
}
app.get("/now", middleware, function (req, res) {
  console.log(req.time);
  return res.json({ time: req.time });
});

app.get("/:word/echo", (req, res) => {
  const echo = req.params.word;
  return res.send({ echo });
});
app.post("/name", (req, res) => {
  // const { first, last } = req.query;
  const { first, last } = req.body;
  const name = first + " " + last;
  console.log("name", name);
  return res.json({ name: name });
});
const port = process.env.PORT || 3000;
bGround.setupBackgroundApp(app, myApp, __dirname).listen(port, () => {
  bGround.log(`Node is listening on port ${port}...`);
});

/******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/
